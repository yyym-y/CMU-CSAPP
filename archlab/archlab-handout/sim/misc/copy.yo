                            | # Execution begins at address 0
0x000:                      |     .pos 0
0x000: 30f40002000000000000 |     irmovq stack, %rsp      # Set up stack pointer
0x00a: 804800000000000000   |     call main               # Execute main program
0x013: 00                   |     halt                    # Terminate program
                            | 
0x018:                      | .align 8 
                            | # Source block 
0x018:                      | src: 
0x018: 0a00000000000000     |     .quad 0x00a
0x020: b000000000000000     |     .quad 0x0b0 
0x028: 000c000000000000     |     .quad 0xc00 
                            | 
                            | # Destination block 
0x030:                      | dest: 
0x030: 1101000000000000     |     .quad 0x111 
0x038: 2202000000000000     |     .quad 0x222 
0x040: 3303000000000000     |     .quad 0x333
                            | 
0x048:                      | main:
0x048: 30f71800000000000000 |     irmovq src, %rdi        # Move src to %rdi for first argument
0x052: 30f63000000000000000 |     irmovq dest, %rsi       # Move dest to %rsi for second argument
0x05c: 30f20300000000000000 |     irmovq $3, %rdx         # Move Len = 3 to %rdx for third argument
0x066: 807000000000000000   |     call copy               # Call copy function
0x06f: 90                   |     ret
                            | 
0x070:                      | copy:
0x070: 30f00000000000000000 |     irmovq $0, %rax         # Set result = %rax = 0
0x07a: 80b400000000000000   |     call test               # Call test function
0x083: 90                   |     ret
                            | 
0x084:                      | doit:
0x084: 30fb0800000000000000 |     irmovq $8, %r11         # %r11 = 8
0x08e: 30fc0100000000000000 |     irmovq $1, %r12         # %r12 = 1
0x098: 50a70000000000000000 |     mrmovq (%rdi), %r10     # save *src = %r10
0x0a2: 60b7                 |     addq %r11, %rdi         # src ++ = %rdi + 8
0x0a4: 40a60000000000000000 |     rmmovq %r10, (%rsi)     # *dest = val = %r10
0x0ae: 60b6                 |     addq %r11, %rsi         # dest ++ = %rsi + 8
0x0b0: 63a0                 |     xorq %r10, %rax         # result ^= val
0x0b2: 61c2                 |     subq %r12, %rdx         # len = %rdx --
                            | 
0x0b4:                      | test:
0x0b4: 30fb0000000000000000 |     irmovq $0, %r11
0x0be: 60b2                 |     addq %r11, %rdx         # nop
0x0c0: 768400000000000000   |     jg doit                 # jump to doit block
0x0c9: 90                   |     ret
                            | 
                            | 
                            | # Stack starts here and grows to lower addresses
0x200:                      |         .pos 0x200
0x200:                      | stack:
