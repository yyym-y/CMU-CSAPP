# Execution begins at address 0
    .pos 0
    irmovq stack, %rsp      # Set up stack pointer
    call main               # Execute main program
    halt                    # Terminate program

# Sample linked list 
.align 8 
ele1: 
    .quad 0x00a 
    .quad ele2

ele2: 
    .quad 0x0b0 
    .quad ele3 
    
ele3: 
    .quad 0xc00 
    .quad 0

main:
    irmovq ele1, %rdi        # Move head node to %rdi as sum function input
    irmovq $0, %rax          # set val = %rax = 0
    call rsum                # Call rsum function
    ret

rsum:
    andq %rdi, %rdi          # Check node = %rdi if equal to 0
    jne addFunc              # Call addFunc
    ret

addFunc:
    mrmovq (%rdi), %r10      # Get node value
    addq %r10, %rax          # Add node value
    mrmovq 8(%rdi), %rdi     # node to node.next
    call rsum                # call rsum
    ret

# Stack starts here and grows to lower addresses
        .pos 0x200
stack:
